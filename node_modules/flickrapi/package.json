{
  "name": "flickrapi",
  "version": "0.2.20",
  "author": {
    "name": "Pomax",
    "email": "pomax@nihongoresources.com"
  },
  "description": "A node.js module for the Flickr API (for use with an API key, oauth enabled)",
  "dependencies": {
    "async": "~0.2.9",
    "glob": "~3.2.6",
    "open": "0.0.x",
    "progress": "1.0.1",
    "prompt": "0.2.x",
    "request": "2.26.x"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "main": "./src/FlickrAPI",
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "keywords": [
    "flickr",
    "api",
    "oauth"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Pomax/node-flickrapi.git"
  },
  "readme": "# A Node.js implementation of the Flickr API\n\nWith oauth authentication for Flickr API keys.\n\n## how to use this package\n\nThe initial require is simply `require(\"flickrapi\")` after making\nsure you added flickrapi to your package.json, either manually or\nby running `npm install flickrapi --save` for the project you're\nusing it in.\n\nOnce available, you can authenticate with flickr, which will\nresult in a callback that gives you the actual API object:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = {\n      key: \"API key that you get from Flickr\",\n      secret: \"API key secret that you get from Flickr\"\n    };\nFlickr.authenticate(flickrOptions, function(error, flickr) {\n  // we can now use \"flickr\" as our API object\n});\n```\n\ncalling API functions is then a matter of calling the functions\nas they are listed on http://www.flickr.com/services/api, so\nif you wish to get all your own photos, you would call:\n\n```\nflickr.photos.search({\n  user_id: flickr.options.user_id,\n  page: 1,\n  per_page: 500\n}, function(err, result) {\n  // result is Flickr's response\n});\n```\n\nAll results are in JSON format. For obvious reasons.\n\n### flickr.options\n\nIn addition to the standard Flickr functions, the `flickr` object\nalso has an `options` property, which looks like this:\n\n```\n{\n  key: \"your API key\",\n  secret: \"your API key secret\",\n  user_id: \"your user id, based on your first-time authorisation\",\n  access_token: \"the preauthorised Flickr access token\",\n  access_token_secret: \"its corresponding secret\",\n  oauth_timestamp: \"the timestamp for the last flickr API call\",\n  oauth_nonce: \"the cryptographic nonce that request used\",\n  afterDownsync: <optional, you can bind an arg-less callback function here>\n  permissions: <optional, default value is 'read', see below>\n}\n```\n\n### Downloading all your Flickr stuffs\n\nYou can use this module to very easily download all your Flickr stuffs:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync());\n```\n\nThat's all you need to run. This will generate a data directory with\nyour images in `./data/images` (in several sizes), and the information\narchitecture (metadata, sets, collections, etc) in `./data/ia`.\n\nIf you want this in a different directory, you can pass the dir as an\nargument to the downsync function:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync(\"userdata/me\"));\n```\n\nThis will now create a `./data` for the flickr API information, but\\\nalso a `./userdata/me/` directory that contains the `images` and `ia`\ndirs with your personal data.\n\nFlickrMirror, available at https://github.com/Pomax/flickrmirror, bolts\na UI on top of the FlickrAPI module to give you an instant frontend\nfor your photographs and Flickr information about them.\n\n### Syncing with Flickr\n\nSyncing is a mostly a matter or running the downsync function again.\nThis will update anything that was updated or added on Flickr, but\nwill not delete anything from your local mirror that was deleted\nfrom Flickr unless specifically told to do so, by passing a second\nargument (internally known as the \"removeDeleted\" flag in the code)\nto the `downsync` function call:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync(\"userdata/me\", true));\n```\n\nIf `true`, this will delete local files that were removed on Flickr\n(e.g. photos that you didn't like anymore, etc). If `false`, or\nomitted, no pruning of the local mirror will be performed.\n\n### Using all your Flickr stuffs in an app\n\nIf you downloaded all your Flickr stuffs, you can use these in your\nown node apps by \"dry loading\" Flickr:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrData = Flickr.loadLocally();\n```\n\nThis will give you an object with the following structure:\n\n```\n{\n  photos: [photo objects],\n  photo_keys: [photo.id array, sorted on publish date],\n  photosets: [set objects],\n  photoset_keys: [set.id array, sorted on creation date],\n  collections: [collection objects],\n  collection_keys: [collection.id array, sorted on title],\n}\n```\n\nNot sure what these objects look like? head over to your `./data/ia`\ndirectory and just open a .json file in your favourite text editor.\n\n## On first run\n\n### Fetching the API\n\nOn first run, the package will fetch all known methods from\nFlickr, and cache them for future use. This can take a bit,\nas there are a fair number of methods, but is inconsequential\non subsequent package loading.\n\n### Authenticating with Flickr\n\nOn first run, the authentication function will notice that\nthere are no `access_token` and `access_token_secret` values\nset, and will negotiate these with Flickr using their oauth\nAPI, based on the permissions you request for your API key.\n\nBy default, the only permissions are \"read\" permissions, but\nyou can override this by adding a `permissions` property to\nthe options object:\n\n* `permissions: \"read\"` will give the app read-only access (default)\n* `permissions: \"write\"` will give it read + write access\n* `permissions: \"delete\"` will give it read, write and delete access\n\nRunning the app will show output such as the following block:\n\n```\n$> node app\n{ oauth_callback_confirmed: 'true',\n  oauth_token: '...',\n  oauth_token_secret: '...' }\nprompt: oauth_verifier: []\n```\n\nOnce the app reaches this point it will open a browser, allowing you\nto consent to the app accessing your most private of private parts.\nOn Flickr, at least. If you agree to authorize it, you will get an\nauthorisation code that you need to pass so that the flickrapi can\nnegotiate access tokens with Flickr. Doing so continues the program:\n\n```\n$> node app\n{ oauth_callback_confirmed: 'true',\n  oauth_token: '...',\n  oauth_token_secret: '...' }\nprompt: oauth_verifier: 123-456-789\n\nAdd the following variables to your environment:\n\nexport FLICKR_USER_ID=\"12345678%40N12\"\nexport FLICKR_ACCESS_TOKEN=\"72157634942121673-3e02b190b9720d7d\"\nexport FLICKR_ACCESS_TOKEN_SECRET=\"99c038c9fc77673e\"\n```\n\nAdd these variables to your environment, or put them in an `.env`\nfile for use with `process.env` or the `habitat` package or the like,\nor put them straight into your source code to use the flickrapi:\n\n```\nvar FlickrOptions = {\n      key: \"your API key\",\n      secret: \"your API key secret\",\n      user_ud: \"...\",\n      access_token: \"...\",\n      access_token_secret: \"...\"\n    }\n```\n\nThe flickrapi package will now be able to authenticate with Flickr\nwithout constantly needing to ask you for permission to access data.\n\n## Software that uses FlickrAPI\n\nThe most obvious application that uses this package is FlickrMirror,\navailable at https://github.com/Pomax/flickrmirror, which mirrors\nyour Flickr data and acts as alternative frontend for your photographs\n(and sets and collections) using a default styling based on the old\nFlickr look, but as open source so you can change the look and feel\nhowever you like.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Pomax/node-flickrapi/issues"
  },
  "homepage": "https://github.com/Pomax/node-flickrapi",
  "_id": "flickrapi@0.2.20",
  "dist": {
    "shasum": "49bc252edd644f9a009afb7f2d32556254244aed"
  },
  "_from": "flickrapi@",
  "_resolved": "https://registry.npmjs.org/flickrapi/-/flickrapi-0.2.20.tgz"
}
